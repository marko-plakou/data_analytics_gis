--31 create table trajectories_feb(mmsi bigint,trajectory geometry(LINESTRING,4326),primary key (mmsi));insert into trajectories_feb(mmsi,trajectory) select mmsi, st_makeline(geom) as routes from ( select mmsi, timestmp,geom from unipi_ais_feb_2018_clean order by mmsi, timestmp) as tmp group by mmsi;COPY trajectories_feb TO 'D:\trajectories_feb.csv' DELIMITER ',' CSV HEADER;create table trajectories_mar(mmsi bigint,trajectory geometry(LINESTRING,4326),primary key (mmsi));insert into trajectories_mar(mmsi,trajectory) select mmsi, st_makeline(geom) as routes from ( select mmsi, timestmp,geom from unipi_ais_mar_2018_clean order by mmsi, timestmp) as tmp group by mmsi;COPY trajectories_mar TO 'D:\trajectories_mar.csv' DELIMITER ',' CSV HEADER;delete from  fishing_ports where country !='Greece';create index idx_trajectories_feb on trajectories_feb using gist(trajectory);  set enable_seqscan = true;create index idx_trajectories_mar on trajectories_mar using gist(trajectory);  set enable_seqscan = true;alter table trajectories_feb add column timestamp bigint;alter table trajectories_feb add column tid serial;update trajectories_feb set timestamp=foo.tsfrom(select distinct mmsi,min(timestmp) as ts from unipi_ais_feb_2018_clean  group by mmsi) as foowhere foo.mmsi=trajectories_feb.mmsi;alter table trajectories_mar add column timestamp bigint;alter table trajectories_mar add column tid serial;update trajectories_mar set timestamp=foo.tsfrom(select distinct mmsi,min(timestmp) as ts from unipi_ais_mar_2018_clean  group by mmsi) as foowhere foo.mmsi=trajectories_mar.mmsi;--3.3create table trajectories_seg(index bigint,mmsi bigint,timestamp bigint,geom geometry(Point,0),lon double precision,lat double precision,velocity double precision,ais_type varchar(50),ais_status varchar(50),ais_heading double precision,ais_turn double precision,ais_course double precision,acceleration double precision,datetime varchar(100),traj_id int,label int,trip_id int);COPY trajectories_seg(index,mmsi,timestamp,geom,lon,lat,velocity,ais_type,ais_heading,ais_status,ais_turn,ais_course,acceleration,datetime,traj_id,label,trip_id)FROM 'D:\traj_seg.csv'DELIMITER ';'CSV HEADER;create table resampled(lat double precision,lon double precision,ts varchar(100));COPY resampled(lat,lon,ts)FROM 'D:\resampled.csv'DELIMITER ';'CSV HEADER;--resampled trajectoriesselect mmsi, st_makeline(geom) as routes from ( select mmsi, trip_id,geom from trajectories_resampled_aligned order by mmsi,timestamp) as tmp group by mmsi,trip_id;--store the final trajectories datasetcreate table trajectories_resampled_aligned(index bigint,mmsi bigint,timestamp bigint,geom geometry(Point,0),lon double precision,lat double precision,velocity double precision,ais_type varchar(50),ais_status varchar(50),ais_heading double precision,ais_turn double precision,ais_course double precision,acceleration double precision,datetime varchar(100),traj_id int,label int,trip_id int);insert into trajectories_resampled_aligned (index,mmsi,timestamp,lon,lat,velocity,ais_type,ais_heading,ais_turn,ais_course,acceleration,datetime,traj_id,ais_status,geom,label,trip_id)select  index,mmsi,timestamp,resampled.lon,resampled.lat,velocity,ais_type,ais_heading,ais_turn,ais_course,acceleration,datetime,traj_id,ais_status,geom,label,trip_idfrom resampled,trajectories_segwhere resampled.lon=trajectories_seg.lon and resampled.lat=trajectories_seg.lat and resampled.ts=trajectories_seg.datetime;copy trajectories_resampled_aligned to 'D:/samples_resampled_aligned.csv' DELIMITER ';' CSV HEADER;create table ec_raw(cluster bigint,st date,et date);copy ec_raw(cluster,st,et)from 'D:/evolving_cluster_clusters_raw.csv'DELIMITER ';'CSV HEADER;create table ec_final(mmsi bigint,timestamp bigint,lon double precision,lat double precision,datetime varchar(100),trip_id int);insert into ec_final (mmsi,timestamp,lon,lat,datetime,trip_id)select mmsi,timestamp,lon,lat,datetime,trip_id from ec_raw,trajectories_resampled_alignedwhere ec_raw.cluster=trajectories_resampled_aligned.mmsi and trajectories_resampled_aligned.datetime>=ec_raw.st and trajectories_resampled_aligned.datetime <=ec_raw.et;